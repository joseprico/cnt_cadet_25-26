name: Update ACTAWP Data

on:
  schedule:
    # Freq√º√®ncia redu√Øda: nom√©s 2 vegades al dia (09:00 i 21:00 hora catalana)
    - cron: '0 7,19 * * *'
  
  workflow_dispatch:

jobs:
  update-actawp:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
      
      # ‚≠ê MILLORA: L√≤gica m√©s Intel¬∑ligent - prioritza que els JSON existeixin
      - name: Download ACTAWP data
        id: download
        continue-on-error: true
        run: |
          echo "üöÄ Iniciant desc√†rrega dades ACTAWP..."
          
          # Executar parser amb captura de logs
          python ultra_robust_parser.py 2>&1 | tee parser_output.log
          parser_exit_code=$?
          
          echo ""
          echo "üìä Analitzant resultats..."
          echo "Exit code del parser: $parser_exit_code"
          
          # PRIORITAT: Comprovar si els JSON s'han creat correctament
          json_cadet_ok=false
          json_juvenil_ok=false
          
          if [ -f "actawp_cadet_data.json" ]; then
            if python3 -c "import json; json.load(open('actawp_cadet_data.json'))" 2>/dev/null; then
              json_cadet_ok=true
              size=$(wc -c < actawp_cadet_data.json)
              echo "‚úÖ CADET JSON: Creat i v√†lid ($size bytes)"
            else
              echo "‚ùå CADET JSON: Existeix per√≤ no √©s v√†lid"
            fi
          else
            echo "‚ö†Ô∏è  CADET JSON: No trobat"
          fi
          
          if [ -f "actawp_juvenil_data.json" ]; then
            if python3 -c "import json; json.load(open('actawp_juvenil_data.json'))" 2>/dev/null; then
              json_juvenil_ok=true
              size=$(wc -c < actawp_juvenil_data.json)
              echo "‚úÖ JUVENIL JSON: Creat i v√†lid ($size bytes)"
            else
              echo "‚ùå JUVENIL JSON: Existeix per√≤ no √©s v√†lid"
            fi
          else
            echo "‚ö†Ô∏è  JUVENIL JSON: No trobat"
          fi
          
          # Decisi√≥: Success si ALMENYS UN JSON √©s v√†lid
          if [ "$json_cadet_ok" = true ] || [ "$json_juvenil_ok" = true ]; then
            echo ""
            echo "‚úÖ RESULTAT: √àxit! Almenys un JSON v√†lid creat"
            echo "success=true" >> $GITHUB_OUTPUT
            
            if [ $parser_exit_code -ne 0 ]; then
              echo ""
              echo "‚ö†Ô∏è  NOTA: El parser va retornar exit code $parser_exit_code"
              echo "‚ö†Ô∏è  Per√≤ els JSON s√≥n v√†lids, continuem!"
              echo ""
              echo "üìÑ √öltimes 30 l√≠nies del parser (per debugging):"
              tail -30 parser_output.log || true
            fi
            
            exit 0
          else
            echo ""
            echo "‚ùå RESULTAT: Error! Cap JSON v√†lid"
            echo "success=false" >> $GITHUB_OUTPUT
            echo ""
            echo "üìÑ √öltimes 40 l√≠nies del parser:"
            tail -40 parser_output.log || true
            exit 1
          fi
      
      # ‚≠ê MILLORA: Upload logs sempre (tant si funciona com si no)
      - name: Upload parser logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: parser-logs-${{ github.run_number }}
          path: parser_output.log
          retention-days: 7
      
      - name: Add timestamp to JSON files
        if: steps.download.outputs.success == 'true'
        run: |
          python3 << EOF
          import json
          from datetime import datetime
          import os
          
          files_updated = []
          
          # Actualitzar fitxer Cadet
          if os.path.exists('actawp_cadet_data.json'):
              try:
                  with open('actawp_cadet_data.json', 'r', encoding='utf-8') as f:
                      data = json.load(f)
                  data['last_update'] = datetime.now().isoformat()
                  data['workflow_run'] = '${{ github.run_number }}'
                  with open('actawp_cadet_data.json', 'w', encoding='utf-8') as f:
                      json.dump(data, f, ensure_ascii=False, indent=2)
                  print("‚úÖ Timestamp afegit a actawp_cadet_data.json")
                  files_updated.append('cadet')
              except Exception as e:
                  print(f"‚ö†Ô∏è Error amb Cadet: {e}")
          
          # Actualitzar fitxer Juvenil
          if os.path.exists('actawp_juvenil_data.json'):
              try:
                  with open('actawp_juvenil_data.json', 'r', encoding='utf-8') as f:
                      data = json.load(f)
                  data['last_update'] = datetime.now().isoformat()
                  data['workflow_run'] = '${{ github.run_number }}'
                  with open('actawp_juvenil_data.json', 'w', encoding='utf-8') as f:
                      json.dump(data, f, ensure_ascii=False, indent=2)
                  print("‚úÖ Timestamp afegit a actawp_juvenil_data.json")
                  files_updated.append('juvenil')
              except Exception as e:
                  print(f"‚ö†Ô∏è Error amb Juvenil: {e}")
          
          if files_updated:
              print(f"‚úÖ Fitxers actualitzats: {', '.join(files_updated)}")
          else:
              print("‚ö†Ô∏è No s'ha actualitzat cap fitxer")
          EOF
      
      - name: Check if there are changes
        id: check_changes
        run: |
          git diff --exit-code actawp_*.json || echo "changes=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push if changed
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add actawp_*.json
          git commit -m "üìÑ Actualitzaci√≥ autom√†tica dades ACTAWP - $(date +'%Y-%m-%d %H:%M:%S')"
          
          # Retry logic per al push
          max_attempts=3
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            
            if git push; then
              echo "‚úÖ Push exit√≥s!"
              exit 0
            else
              if [ $attempt -lt $max_attempts ]; then
                echo "‚ö†Ô∏è Error al push. Reintentant..."
                sleep 10
                git pull --rebase
              else
                echo "‚ùå Error despr√©s de $max_attempts intents de push"
                exit 1
              fi
            fi
          done
      
      - name: Create summary
        if: always()
        run: |
          echo "### üìä Actualitzaci√≥ ACTAWP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Data:** $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Estat del download
          if [ "${{ steps.download.outputs.success }}" == "true" ]; then
            echo "‚úÖ **Parser:** Dades descarregades correctament" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Parser:** Error descarregant dades" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Estat dels fitxers
          if [ -f "actawp_cadet_data.json" ]; then
            echo "‚úÖ **Cadet:** JSON creat" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  **Cadet:** JSON no trobat" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "actawp_juvenil_data.json" ]; then
            echo "‚úÖ **Juvenil:** JSON creat" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  **Juvenil:** JSON no trobat" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Canvis detectats
          if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **Git:** Canvis commitejats i pujats" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è  **Git:** No hi ha canvis respecte l'√∫ltima actualitzaci√≥" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Configuraci√≥:**" >> $GITHUB_STEP_SUMMARY
          echo "- Token: GH_TOKEN (5000 req/h)" >> $GITHUB_STEP_SUMMARY
          echo "- Propera execuci√≥: 07:00 i 19:00 UTC" >> $GITHUB_STEP_SUMMARY
          echo "- Logs disponibles com artifact: \`parser-logs-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          
          # Mostrar fragment del log si hi ha
          if [ -f "parser_output.log" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üìÑ Fragment del parser log:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 parser_output.log >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No es pot mostrar el log" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
